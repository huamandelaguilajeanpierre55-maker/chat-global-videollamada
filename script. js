const socket = io();

// --- Chat ---
const input = document.getElementById("messageInput");
const messages = document.getElementById("messages");

function sendMessage() {
  const msg = input.value;
  if (msg.trim() !== "") {
    socket.emit("chatMessage", msg);
    input.value = "";
  }
}

socket.on("chatMessage", (msg) => {
  const li = document.createElement("li");
  li.textContent = msg;
  messages.appendChild(li);
});

// --- Videollamadas con WebRTC ---
const localVideo = document.getElementById("localVideo");
const remoteVideo = document.getElementById("remoteVideo");

let localStream;
let peerConnection;

const config = {
  iceServers: [
    { urls: "stun:stun.l.google.com:19302" } // Servidor STUN gratuito
  ]
};

async function startCall() {
  try {
    // Capturar cámara y micrófono
    localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
    localVideo.srcObject = localStream;

    // Crear conexión P2P
    peerConnection = new RTCPeerConnection(config);

    // Agregar tracks de audio/video
    localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

    // Mostrar video remoto cuando llegue
    peerConnection.ontrack = (event) => {
      remoteVideo.srcObject = event.streams[0];
    };

    // Intercambiar candidatos ICE
    peerConnection.onicecandidate = (event) => {
      if (event.candidate) {
        socket.emit("candidate", event.candidate);
      }
    };

    // Crear oferta
    const offer = await peerConnection.createOffer();
    await peerConnection.setLocalDescription(offer);

    socket.emit("offer", offer);

  } catch (err) {
    console.error("Error al iniciar la llamada:", err);
    alert("No se pudo acceder a la cámara/micrófono");
  }
}

// Recibir oferta
socket.on("offer", async (offer) => {
  peerConnection = new RTCPeerConnection(config);

  peerConnection.ontrack = (event) => {
    remoteVideo.srcObject = event.streams[0];
  };

  peerConnection.onicecandidate = (event) => {
    if (event.candidate) {
      socket.emit("candidate", event.candidate);
    }
  };

  await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));

  localStream = await navigator.mediaDevices.getUserMedia({
